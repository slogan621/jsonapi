%{

/*
jsonapi - c++ JSON parser

Copyright (C) 2012  Syd Logan

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301,
USA.

Copyright (c) 2012, Syd Logan
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/


#include <stdio.h>
#include "jsonobj.h"
#include "context.h"
#include "jsonparse.h"
#include "json.h"
#include "lex.h"

int yylex(YYSTYPE *yylval_param, void *yyscanner);
int yyerror(JsonParse *parser, void *yyscanner, const char *s);

%}

%define api.pure
%lex-param {void *scanner}
%parse-param {JsonParse *parser}
%parse-param {void *scanner}

%union {
    void *obj;
}

%token tok_leftbrace 
%token tok_rightbrace
%token tok_leftbracket
%token tok_rightbracket
%token tok_comma
%token tok_colon
%token tok_string
%token tok_number
%token tok_float
%token tok_scinotation
%token tok_true
%token tok_false
%token tok_null
%token tok_unknown

%type<obj> tuple
%type<obj> tuplelist
%type<obj> valuelist
%type<obj> tok_string
%type<obj> tok_float
%type<obj> tok_number
%type<obj> tok_false
%type<obj> tok_true
%type<obj> tok_null
%type<obj> value
%type<obj> object
%type<obj> array
%type<obj> objectstart
%type<obj> arraystart

%%

jsonobject
    : value 

object
    : objectstart tuplelist objectend

objectstart
    : tok_leftbrace {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddObject(obj);}

objectend
    : tok_rightbrace {Context *ctx = static_cast<JsonParse *>(parser)->GetContext(); ctx->Pop();}

array 
    : arraystart valuelist arrayend

arraystart
    : tok_leftbracket {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddArray(obj);}
 
arrayend
    : tok_rightbracket {Context *ctx = static_cast<JsonParse *>(parser)->GetContext(); ctx->Pop();}

valuelist
    : {} | value | value tok_comma valuelist 

value 
    : object {} | 
      array {} | 
      tok_string {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddValue(obj);} | 
      tok_number {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddValue(obj);}  | 
      tok_float {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddValue(obj);} | 
      tok_true {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddValue(obj);} | 
      tok_false  {JsonValue *obj = static_cast<JsonValue *>(yylval.obj);
static_cast<JsonParse *>(parser)->AddValue(obj);} | 
      tok_null {JsonValue *obj = static_cast<JsonValue *>(yylval.obj); static_cast<JsonParse *>(parser)->AddValue(obj);}

tuplelist
    : {} | tuple | tuple tok_comma tuplelist

tuple
    : tok_string tok_colon value {static_cast<JsonParse *>(parser)->AddTuple($1, $3); }

%%

/**
 * Display error message found during a parse.
 *
 * @param[in] scanner lexical analyzer
 * @param[in] msg the error message to display
 * 
 * @note sometimes the return from yyget_lineno is nonsense. 
 */

void
JsonParse::HandleError(void *scanner, const char *msg)
{
#ifdef JSON_PARSE_VERBOSE
    if (scanner && msg) {
        fprintf(stderr, "line %d: %s\n", yyget_lineno(scanner) + 1, msg); 
    } else if (msg) {
        fprintf(stderr, "%s\n", msg); 
    }
#endif
}


/**
 * Parse the JSON string, constructing an object tree which can be used
 * by the API.
 *
 * @return true on success, false on failure.
 */

bool
JsonParse::Parse()
{
    JsonNode *p;
    YY_BUFFER_STATE state;
    void *scanner;

    // clear out any previous context, e.g., a subsequent parse.

    while ((p = m_ctx.Pop()) != (JsonNode *) NULL) {
        delete p;
    }

    m_root = NULL;

    PushRoot();

    if (yylex_init(&scanner)) {
        fprintf(stderr, "%s: failed to init scanner\n", __FUNCTION__);
        return false;
    }

    state = yy_scan_string(m_input.c_str(), scanner);

    int ret = yyparse(this, scanner);
    yy_delete_buffer(state, scanner);
    yylex_destroy(scanner);

    // XXX check for errors from parse.

    return ret == 0 ? true : false;
}

